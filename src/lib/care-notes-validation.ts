// Th∆∞ vi·ªán validation cho ghi ch√∫ chƒÉm s√≥c chuy√™n nghi·ªáp

export interface CareNoteValidationError {
  field: string;
  message: string;
  severity: 'error' | 'warning' | 'info';
  code?: string;
}

export interface CareNoteData {
  note: string;
  priority?: 'low' | 'medium' | 'high';
  category?: string;
}

// C√°c t·ª´ kh√≥a y t·∫ø quan tr·ªçng
export const MEDICAL_KEYWORDS = {
  critical: [
    'kh√≥ th·ªü', 'ƒëau ng·ª±c', 'ng·∫•t xiu', 'co gi·∫≠t', 's·ªët cao', 'ch·∫£y m√°u',
    'ƒë·ªôt qu·ªµ', 'tim ƒë·∫≠p nhanh', 'huy·∫øt √°p cao', 'ƒë∆∞·ªùng huy·∫øt th·∫•p',
    'd·ªã ·ª©ng', 'nhi·ªÖm tr√πng', 'vi√™m ph·ªïi', 'suy tim', 'suy th·∫≠n'
  ],
  attention: [
    'ƒëau ƒë·∫ßu', 'ch√≥ng m·∫∑t', 'bu·ªìn n√¥n', 'ti√™u ch·∫£y', 't√°o b√≥n',
    'm·∫•t ng·ªß', 'lo √¢u', 'tr·∫ßm c·∫£m', 'm·ªát m·ªèi', 'ƒÉn k√©m',
    's∆∞ng ph√π', 't√™ b√¨', 'ƒëau l∆∞ng', 'ƒëau kh·ªõp', 'ho'
  ],
  medication: [
    'u·ªëng thu·ªëc', 'b·ªè thu·ªëc', 't√°c d·ª•ng ph·ª•', 'd·ªã ·ª©ng thu·ªëc',
    'tƒÉng li·ªÅu', 'gi·∫£m li·ªÅu', 'ƒë·ªïi thu·ªëc', 'ng·ª´ng thu·ªëc'
  ],
  nutrition: [
    'ƒÉn k√©m', 'ch√°n ƒÉn', 's√∫t c√¢n', 'tƒÉng c√¢n', 'kh√≥ nu·ªët',
    'ƒëau b·ª•ng', 'ti√™u h√≥a', 'n√¥n √≥i', '·ª£ chua', 'ƒë·∫ßy b·ª•ng'
  ],
  mobility: [
    'ng√£', 'kh√≥ ƒëi', 'ƒëau kh·ªõp', 'run tay', 'y·∫øu ch√¢n',
    'c·∫ßn h·ªó tr·ª£', 'xe lƒÉn', 'g·∫≠y ch·ªëng', 'thay bƒÉng', 'v·∫øt th∆∞∆°ng'
  ],
  cognitive: [
    'qu√™n', 'l√∫ l·∫´n', 'kh√¥ng nh·∫≠n ra', 'hoang t∆∞·ªüng', 'k√≠ch ƒë·ªông',
    'tr·∫ßm c·∫£m', 'lo √¢u', 'm·∫•t ng·ªß', '√°c m·ªông', 't·ª± l√†m h·∫°i'
  ]
};

// M·∫´u ghi ch√∫ chu·∫©n y t·∫ø
export const NOTE_TEMPLATES = [
  {
    category: 'Theo d√µi s·ª©c kh·ªèe',
    template: 'Huy·∫øt √°p: [systolic]/[diastolic] mmHg, M·∫°ch: [pulse] l·∫ßn/ph√∫t, Nhi·ªát ƒë·ªô: [temp]¬∞C. T√¨nh tr·∫°ng chung: [general_condition].',
    requiredFields: ['systolic', 'diastolic', 'pulse', 'temp', 'general_condition']
  },
  {
    category: 'D√πng thu·ªëc',
    template: 'ƒê√£ u·ªëng [medication] l√∫c [time]. Ph·∫£n ·ª©ng: [reaction]. Ghi ch√∫: [notes].',
    requiredFields: ['medication', 'time', 'reaction']
  },
  {
    category: 'Dinh d∆∞·ª°ng',
    template: 'ƒÇn [meal_type]: [amount_eaten]. Th·ª©c u·ªëng: [drinks]. Kh√≥ khƒÉn: [difficulties].',
    requiredFields: ['meal_type', 'amount_eaten']
  },
  {
    category: 'V·∫≠n ƒë·ªông',
    template: 'Ho·∫°t ƒë·ªông: [activity]. Th·ªùi gian: [duration]. H·ªó tr·ª£: [assistance]. Ghi ch√∫: [notes].',
    requiredFields: ['activity']
  },
  {
    category: 'T√¢m l√Ω',
    template: 'T√¢m tr·∫°ng: [mood]. Giao ti·∫øp: [communication]. Ho·∫°t ƒë·ªông x√£ h·ªôi: [social_activity]. C·∫ßn ch√∫ √Ω: [concerns].',
    requiredFields: ['mood']
  }
];

// Validation chuy√™n nghi·ªáp cho ghi ch√∫ chƒÉm s√≥c
export class CareNoteValidator {

  // Ph√¢n t√≠ch m·ª©c ƒë·ªô ∆∞u ti√™n t·ª± ƒë·ªông
  static analyzeAutoPriority(note: string): 'low' | 'medium' | 'high' {
    const lowerNote = note.toLowerCase();

    // Ki·ªÉm tra t·ª´ kh√≥a nguy hi·ªÉm
    const hasCriticalKeywords = MEDICAL_KEYWORDS.critical.some(keyword =>
      lowerNote.includes(keyword)
    );
    if (hasCriticalKeywords) return 'high';

    // Ki·ªÉm tra t·ª´ kh√≥a c·∫ßn ch√∫ √Ω
    const hasAttentionKeywords = MEDICAL_KEYWORDS.attention.some(keyword =>
      lowerNote.includes(keyword)
    );
    if (hasAttentionKeywords) return 'medium';

    // Ki·ªÉm tra t·ª´ kh√≥a thu·ªëc
    const hasMedicationKeywords = MEDICAL_KEYWORDS.medication.some(keyword =>
      lowerNote.includes(keyword)
    );
    if (hasMedicationKeywords) return 'medium';

    // M·∫∑c ƒë·ªãnh l√† m·ª©c ƒë·ªô th·∫•p
    return 'low';
  }

  // Ph√¢n lo·∫°i ch·ªß ƒë·ªÅ ghi ch√∫
  static categorizeNote(note: string): string {
    const lowerNote = note.toLowerCase();

    if (MEDICAL_KEYWORDS.medication.some(kw => lowerNote.includes(kw))) {
      return 'D√πng thu·ªëc';
    }
    if (MEDICAL_KEYWORDS.nutrition.some(kw => lowerNote.includes(kw))) {
      return 'Dinh d∆∞·ª°ng';
    }
    if (MEDICAL_KEYWORDS.mobility.some(kw => lowerNote.includes(kw))) {
      return 'V·∫≠n ƒë·ªông';
    }
    if (MEDICAL_KEYWORDS.cognitive.some(kw => lowerNote.includes(kw))) {
      return 'T√¢m l√Ω - Nh·∫≠n th·ª©c';
    }
    if (MEDICAL_KEYWORDS.critical.some(kw => lowerNote.includes(kw)) ||
        MEDICAL_KEYWORDS.attention.some(kw => lowerNote.includes(kw))) {
      return 'Theo d√µi s·ª©c kh·ªèe';
    }

    return 'ChƒÉm s√≥c t·ªïng qu√°t';
  }

  // Validate n·ªôi dung ghi ch√∫
  static validateNoteContent(noteData: CareNoteData): CareNoteValidationError[] {
    const errors: CareNoteValidationError[] = [];
    const { note } = noteData;

    // 1. Ki·ªÉm tra n·ªôi dung c∆° b·∫£n
    if (!note.trim()) {
      errors.push({
        field: 'note',
        message: 'N·ªôi dung ghi ch√∫ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
        severity: 'error',
        code: 'NOTE_CONTENT_REQUIRED'
      });
      return errors;
    }

    // 2. Ki·ªÉm tra ƒë·ªô d√†i t·ªëi thi·ªÉu
    if (note.trim().length < 10) {
      errors.push({
        field: 'note',
        message: 'Ghi ch√∫ qu√° ng·∫Øn (t·ªëi thi·ªÉu 10 k√Ω t·ª±). C·∫ßn m√¥ t·∫£ r√µ r√†ng t√¨nh tr·∫°ng ho·∫∑c s·ª± vi·ªác.',
        severity: 'error',
        code: 'NOTE_TOO_SHORT'
      });
    }

    // 3. Ki·ªÉm tra ƒë·ªô d√†i t·ªëi ƒëa
    if (note.length > 1000) {
      errors.push({
        field: 'note',
        message: 'Ghi ch√∫ qu√° d√†i (>1000 k√Ω t·ª±). N√™n t√≥m t·∫Øt n·ªôi dung ch√≠nh ho·∫∑c chia th√†nh nhi·ªÅu ghi ch√∫.',
        severity: 'warning',
        code: 'NOTE_TOO_LONG'
      });
    }

    // 4. Ki·ªÉm tra t·ª´ kh√≥a y t·∫ø quan tr·ªçng
    const autoPriority = this.analyzeAutoPriority(note);
    const suggestedCategory = this.categorizeNote(note);

    errors.push({
      field: 'priority_suggestion',
      message: `G·ª£i √Ω m·ª©c ƒë·ªô ∆∞u ti√™n: ${autoPriority === 'high' ? 'Cao' : autoPriority === 'medium' ? 'Trung b√¨nh' : 'Th·∫•p'} - Ch·ªß ƒë·ªÅ: ${suggestedCategory}`,
      severity: 'info',
      code: 'AUTO_PRIORITY_SUGGESTION'
    });

    // 5. Ki·ªÉm tra t·ª´ kh√≥a nguy hi·ªÉm
    const criticalKeywords = MEDICAL_KEYWORDS.critical.filter(keyword =>
      note.toLowerCase().includes(keyword)
    );
    if (criticalKeywords.length > 0) {
      errors.push({
        field: 'critical_alert',
        message: `üö® C·∫¢NH B√ÅO: Ph√°t hi·ªán t·ª´ kh√≥a nghi√™m tr·ªçng "${criticalKeywords.join(', ')}". C·∫ßn b√°o c√°o ngay cho b√°c sƒ© v√† gia ƒë√¨nh.`,
        severity: 'error',
        code: 'CRITICAL_KEYWORDS_DETECTED'
      });
    }

    // 6. Ki·ªÉm tra th√¥ng tin s·ªë li·ªáu y t·∫ø
    const hasVitalSigns = /(\d+\/\d+|huy·∫øt √°p|m·∫°ch|nhi·ªát ƒë·ªô|\d+¬∞C|\d+ l·∫ßn\/ph√∫t)/.test(note.toLowerCase());
    if (hasVitalSigns) {
      errors.push({
        field: 'vital_signs',
        message: 'üìä Ph√°t hi·ªán ch·ªâ s·ªë sinh hi·ªáu. ƒê·∫£m b·∫£o ƒëo ƒë·∫°c ch√≠nh x√°c v√† ghi r√µ th·ªùi gian ƒëo.',
        severity: 'info',
        code: 'VITAL_SIGNS_DETECTED'
      });
    }

    // 7. Ki·ªÉm tra th√¥ng tin thu·ªëc
    const medicationKeywords = MEDICAL_KEYWORDS.medication.filter(keyword =>
      note.toLowerCase().includes(keyword)
    );
    if (medicationKeywords.length > 0) {
      errors.push({
        field: 'medication_info',
        message: `üíä Th√¥ng tin v·ªÅ thu·ªëc: "${medicationKeywords.join(', ')}". C·∫ßn ghi r√µ t√™n thu·ªëc, li·ªÅu l∆∞·ª£ng, th·ªùi gian.`,
        severity: 'info',
        code: 'MEDICATION_INFO_DETECTED'
      });
    }

    // 8. Ki·ªÉm tra t√≠nh kh√°ch quan
    const subjectiveWords = ['c√≥ v·∫ª', 'h√¨nh nh∆∞', 'ch·∫Øc l√†', 'c√≥ th·ªÉ', 't√¥i nghƒ©'];
    const hasSubjectiveLanguage = subjectiveWords.some(word => 
      note.toLowerCase().includes(word)
    );
    if (hasSubjectiveLanguage) {
      errors.push({
        field: 'objectivity',
        message: 'Ghi ch√∫ ch·ª©a ng√¥n ng·ªØ ch·ªß quan. N√™n s·ª≠ d·ª•ng c√°c thu·∫≠t ng·ªØ kh√°ch quan, c·ª• th·ªÉ.',
        severity: 'warning',
        code: 'SUBJECTIVE_LANGUAGE'
      });
    }

    // 9. Ki·ªÉm tra ng·ªØ ph√°p v√† ch√≠nh t·∫£ c∆° b·∫£n
    const hasRepeatedSpaces = /\s{2,}/.test(note);
    if (hasRepeatedSpaces) {
      errors.push({
        field: 'formatting',
        message: 'Ghi ch√∫ c√≥ nhi·ªÅu kho·∫£ng tr·∫Øng li√™n ti·∫øp. C·∫ßn ch·ªânh s·ª≠a ƒë·ªãnh d·∫°ng.',
        severity: 'info',
        code: 'FORMATTING_ISSUE'
      });
    }

    // 10. G·ª£i √Ω m·∫´u ghi ch√∫ chu·∫©n
    const category = this.categorizeNote(note);
    const template = NOTE_TEMPLATES.find(t => t.category === category);
    if (template && note.length < 50) {
      errors.push({
        field: 'template_suggestion',
        message: `üí° G·ª£i √Ω m·∫´u ghi ch√∫ cho "${category}": ${template.template}`,
        severity: 'info',
        code: 'TEMPLATE_SUGGESTION'
      });
    }

    return errors;
  }

  // Validate ∆∞u ti√™n th·ªß c√¥ng
  static validatePriority(
    note: string,
    manualPriority?: 'low' | 'medium' | 'high'
  ): CareNoteValidationError[] {
    const errors: CareNoteValidationError[] = [];
    
    if (!manualPriority) return errors;

    const autoPriority = this.analyzeAutoPriority(note);
    
    // C·∫£nh b√°o n·∫øu ∆∞u ti√™n th·ªß c√¥ng kh√°c bi·ªát ƒë√°ng k·ªÉ so v·ªõi t·ª± ƒë·ªông
    if (autoPriority === 'high' && manualPriority === 'low') {
      errors.push({
        field: 'priority_mismatch',
        message: '‚ö†Ô∏è C·∫¢NH B√ÅO: Ghi ch√∫ ch·ª©a t·ª´ kh√≥a nghi√™m tr·ªçng nh∆∞ng ƒë∆∞·ª£c ƒë√°nh gi√° m·ª©c ƒë·ªô ∆∞u ti√™n th·∫•p. Vui l√≤ng xem x√©t l·∫°i.',
        severity: 'warning',
        code: 'PRIORITY_DOWNGRADE_WARNING'
      });
    }

    if (autoPriority === 'low' && manualPriority === 'high') {
      errors.push({
        field: 'priority_mismatch',
        message: 'Ghi ch√∫ ƒë∆∞·ª£c ƒë√°nh gi√° m·ª©c ƒë·ªô ∆∞u ti√™n cao. ƒê·∫£m b·∫£o n·ªôi dung ph·∫£n √°nh ƒë√∫ng m·ª©c ƒë·ªô nghi√™m tr·ªçng.',
        severity: 'info',
        code: 'PRIORITY_UPGRADE_INFO'
      });
    }

    return errors;
  }

  // Validation t·ªïng th·ªÉ
  static validateCareNote(noteData: CareNoteData): CareNoteValidationError[] {
    const errors: CareNoteValidationError[] = [];

    // 1. Validate n·ªôi dung
    errors.push(...this.validateNoteContent(noteData));

    // 2. Validate ∆∞u ti√™n
    errors.push(...this.validatePriority(noteData.note, noteData.priority));

    return errors;
  }

  // T·∫°o ghi ch√∫ c√≥ c·∫•u tr√∫c
  static generateStructuredNote(
    category: string,
    data: Record<string, any>
  ): { note: string; errors: CareNoteValidationError[] } {
    const template = NOTE_TEMPLATES.find(t => t.category === category);
    const errors: CareNoteValidationError[] = [];

    if (!template) {
      errors.push({
        field: 'template',
        message: `Kh√¥ng t√¨m th·∫•y m·∫´u ghi ch√∫ cho danh m·ª•c "${category}"`,
        severity: 'error',
        code: 'TEMPLATE_NOT_FOUND'
      });
      return { note: '', errors };
    }

    let note = template.template;

    // Thay th·∫ø c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    template.requiredFields.forEach(field => {
      if (!data[field]) {
        errors.push({
          field: field,
          message: `Tr∆∞·ªùng "${field}" l√† b·∫Øt bu·ªôc cho ghi ch√∫ ${category}`,
          severity: 'error',
          code: 'REQUIRED_FIELD_MISSING'
        });
      } else {
        note = note.replace(`[${field}]`, data[field]);
      }
    });

    // Thay th·∫ø c√°c tr∆∞·ªùng t√πy ch·ªçn
    Object.keys(data).forEach(key => {
      if (data[key] && !template.requiredFields.includes(key)) {
        note = note.replace(`[${key}]`, data[key]);
      }
    });

    // X√≥a c√°c tr∆∞·ªùng ch∆∞a ƒë∆∞·ª£c thay th·∫ø
    note = note.replace(/\[[^\]]+\]/g, '_____');

    return { note, errors };
  }

  // T√≠nh ƒëi·ªÉm ch·∫•t l∆∞·ª£ng ghi ch√∫ (0-100)
  static calculateNoteQuality(noteData: CareNoteData): {
    score: number;
    level: 'poor' | 'fair' | 'good' | 'excellent';
    suggestions: string[];
  } {
    const errors = this.validateCareNote(noteData);
    const suggestions: string[] = [];
    let score = 100;

    // Tr·ª´ ƒëi·ªÉm cho c√°c l·ªói
    errors.forEach(error => {
      switch (error.severity) {
        case 'error':
          score -= 25;
          suggestions.push(error.message);
          break;
        case 'warning':
          score -= 10;
          break;
        case 'info':
          // Kh√¥ng tr·ª´ ƒëi·ªÉm cho th√¥ng tin
          break;
      }
    });

    // Th√™m ƒëi·ªÉm cho c√°c y·∫øu t·ªë t√≠ch c·ª±c
    const { note } = noteData;

    // ƒê·ªô d√†i ph√π h·ª£p
    if (note.length >= 50 && note.length <= 300) {
      score += 10;
    }

    // C√≥ th√¥ng tin c·ª• th·ªÉ (s·ªë li·ªáu, th·ªùi gian)
    const hasSpecificInfo = /(\d+|\d+:\d+|[0-9]{1,2}\/[0-9]{1,2})/.test(note);
    if (hasSpecificInfo) {
      score += 10;
    }

    // S·ª≠ d·ª•ng thu·∫≠t ng·ªØ y t·∫ø
    const medicalTerms = [...MEDICAL_KEYWORDS.critical, ...MEDICAL_KEYWORDS.attention]
      .filter(term => note.toLowerCase().includes(term));
    if (medicalTerms.length > 0) {
      score += 5;
    }

    // T√≠nh chuy√™n nghi·ªáp (kh√¥ng ch·ª©a ng√¥n ng·ªØ th√¥ng t·ª•c)
    const informalWords = ['ok', 'oke', 't·∫°m ƒë∆∞·ª£c', 'b√¨nh th∆∞·ªùng'];
    const hasInformalLanguage = informalWords.some(word => 
      note.toLowerCase().includes(word)
    );
    if (!hasInformalLanguage) {
      score += 5;
    }

    // Gi·ªõi h·∫°n ƒëi·ªÉm t·ª´ 0-100
    score = Math.max(0, Math.min(100, score));

    let level: 'poor' | 'fair' | 'good' | 'excellent' = 'poor';
    if (score >= 85) level = 'excellent';
    else if (score >= 70) level = 'good';
    else if (score >= 50) level = 'fair';

    // Th√™m g·ª£i √Ω c·∫£i thi·ªán
    if (score < 50) {
      suggestions.unshift('Ghi ch√∫ c·∫ßn c·∫£i thi·ªán ƒë√°ng k·ªÉ v·ªÅ n·ªôi dung v√† ch·∫•t l∆∞·ª£ng chuy√™n m√¥n');
    } else if (score < 70) {
      suggestions.unshift('Ghi ch√∫ c√≥ th·ªÉ c·∫£i thi·ªán th√™m ƒë·ªÉ ƒë·∫°t ti√™u chu·∫©n chuy√™n nghi·ªáp');
    } else if (score >= 85) {
      suggestions.unshift('Ghi ch√∫ c√≥ ch·∫•t l∆∞·ª£ng xu·∫•t s·∫Øc, ƒë·∫°t ti√™u chu·∫©n chuy√™n nghi·ªáp');
    }

    return { score, level, suggestions };
  }
} 